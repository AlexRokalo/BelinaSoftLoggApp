// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.loginapp.injection;

import alex.mrrok.domain.executors.PostExecutionThread;
import alex.mrrok.loginapp.executor.UiThread;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvidePostExecutionThreadFactory
    implements Factory<PostExecutionThread> {
  private final AppModule module;

  private final Provider<UiThread> uiThreadProvider;

  public AppModule_ProvidePostExecutionThreadFactory(
      AppModule module, Provider<UiThread> uiThreadProvider) {
    this.module = module;
    this.uiThreadProvider = uiThreadProvider;
  }

  @Override
  public PostExecutionThread get() {
    return provideInstance(module, uiThreadProvider);
  }

  public static PostExecutionThread provideInstance(
      AppModule module, Provider<UiThread> uiThreadProvider) {
    return proxyProvidePostExecutionThread(module, uiThreadProvider.get());
  }

  public static AppModule_ProvidePostExecutionThreadFactory create(
      AppModule module, Provider<UiThread> uiThreadProvider) {
    return new AppModule_ProvidePostExecutionThreadFactory(module, uiThreadProvider);
  }

  public static PostExecutionThread proxyProvidePostExecutionThread(
      AppModule instance, UiThread uiThread) {
    return Preconditions.checkNotNull(
        instance.providePostExecutionThread(uiThread),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
