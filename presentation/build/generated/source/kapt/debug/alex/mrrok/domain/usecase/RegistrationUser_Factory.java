// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.domain.usecase;

import alex.mrrok.domain.executors.PostExecutionThread;
import alex.mrrok.domain.repository.Repository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class RegistrationUser_Factory implements Factory<RegistrationUser> {
  private final Provider<Repository> arg0Provider;

  private final Provider<PostExecutionThread> arg1Provider;

  public RegistrationUser_Factory(
      Provider<Repository> arg0Provider, Provider<PostExecutionThread> arg1Provider) {
    this.arg0Provider = arg0Provider;
    this.arg1Provider = arg1Provider;
  }

  @Override
  public RegistrationUser get() {
    return provideInstance(arg0Provider, arg1Provider);
  }

  public static RegistrationUser provideInstance(
      Provider<Repository> arg0Provider, Provider<PostExecutionThread> arg1Provider) {
    return new RegistrationUser(arg0Provider.get(), arg1Provider.get());
  }

  public static RegistrationUser_Factory create(
      Provider<Repository> arg0Provider, Provider<PostExecutionThread> arg1Provider) {
    return new RegistrationUser_Factory(arg0Provider, arg1Provider);
  }

  public static RegistrationUser newRegistrationUser(Repository arg0, PostExecutionThread arg1) {
    return new RegistrationUser(arg0, arg1);
  }
}
